<?xml version="1.0"?>
<grammar
  xmlns="http://relaxng.org/ns/structure/1.0"
  xmlns:db="http://docbook.org/ns/docbook"
  xmlns:css="http://www.w3.org/1996/css"
  xmlns:s="http://purl.oclc.org/dsdl/schematron"
  xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"
  xmlns:html="http://www.w3.org/1999/xhtml"
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes"
  ns="http://docbook.org/ns/docbook"
  >

  <s:ns prefix="db" uri="http://docbook.org/ns/docbook"/>
  <s:ns prefix="css" uri="http://www.w3.org/1996/css"/>
  <s:ns prefix="xlink" uri="http://www.w3.org/1999/xlink"/>

  <html:h1>le-tex Hub Format</html:h1>

  <html:p>Hub is a DocBook 5.1 (precisely: DocBook Publishers V5.1CR1-1) derivative with the following modifications:</html:p>

  <html:ul>
    <html:li>
      <html:p>'hub' is the an additional top-level element that contains only block-level content (paras, lists, figures, etc.),
      but no hierarchy (section, chapter, part, etc.).</html:p>
    </html:li>
    <html:li>
      <html:p>There is an optional /*/info[@role='hub'] element that contains certain keywords (keyword[@role='…']):</html:p>
      <html:ul>
        <html:li>
          <html:p>hierarchized (boolean): whether there is a proper nested part/chapter/section hierarchy</html:p>
        </html:li>
        <html:li>
          <html:p>formatting-deviations-only (boolean): whether the css and css-like attributes on content elements 
            contain only deviations from what is defined in the corresponding 'style'. Necessitates that there is 
            a 'styles' section (see below)</html:p>
        </html:li>
        <html:li>
          <html:p>marked-identifiers (boolean): whether all identifiers in list items, section titles etc. have been made explicit 
            and have been enclosed in a phrase[@role='hub:identifier'] element</html:p>
        </html:li>
        <html:li>
          <html:p>processed-lists (boolean): whether lists have been grouped and nested</html:p>
        </html:li>
        <html:li>
          <html:p>titles-associated-with-floats (boolean): whether all figure/table/example titles have been grouped with their content</html:p>
        </html:li>
        <html:li>
          <html:p>source-type ('idml', 'docx', 'xhtml11', 'epub20', 'epub30')</html:p>
        </html:li>
      </html:ul>
      <html:p>The attributes should be set by converters that perform the corresponding tasks (e.g., hierarchize).
        Missing boolean attributes must be treated as 'false'. Presence of a 'true'-valued attribute does not guarantee
        that the content is actually in accordance with this property (e.g., all lists properly nested, all headings
        hierarchized, …). It is just a hint for checking rules that they may justifiedly warn about paragraphs that
        look like unprocessed lists or like headings in the middle of a section’s content.</html:p>
    </html:li>
    <html:li>
      <html:p>Styling may be expressed as CSS attributes. See css/css.rng for documentation. Custom attributes that don’t follow CSS 3
      or 2.1 semantics may be included in the Hub (i.e., DocBook) or any other namespace that is deemed appropriate.</html:p>
    </html:li>
    <html:li>
      <html:p>Paragraph, character, table, and cell styles may be included below a 'css:rules' element in /*/info </html:p>
    </html:li>
    <html:li>
      <html:p>In addition to CSS attributes, paragraph styles defintions may contain a list of tab stops ('tab') in a 'tabs' element. 
      The 'tabs' element may also be present in 'para' and 'title'.</html:p>
    </html:li>
    <html:li>
      <html:p>There are additional inline elements: 'tab' and 'br'. Note that the inline 'tab' follows a content model
        that is different from the tabs/tab element (in the tab declarations).</html:p>
    </html:li>
    <html:li>
      <html:p>itemizedlist/@mark and listitem/@override are treated as literal list marker strings, rather than as names of
        something.</html:p>
    </html:li>
    <html:li>
      <html:p>There are mandatory and fixed attributes on /*: @version, @css:version, and
        @css:host-vocabulary-rule-selection-attribute. The latter binds DocBook’s @role attribute to selecting a
        css:rule whose name corresponds to the @role attribute value (just like @class does for HTML).</html:p>
    </html:li>
    <html:li>
      <html:p>An attribute @srcpath (a URI, e.g., file:/path/to/my.idml?xpath=/Story/…) may be attached on almost every element.
      It may be used by processes that collect errors and warnings (together with the paths where they occurred) to render
      the messages at the corresponding locations in an HTML report.</html:p>
    </html:li>
  </html:ul>

  <include href="css/cssa-publisher-extensions.rng">

    <define name="custom.css-like.attributes">
      <ref name="hub.att.numbering-starts-at"/>
      <ref name="hub.att.numbering-level"/>
      <ref name="hub.att.numbering-continue"/>
    </define>

    <define name="custom.css_element_model">
      <interleave>
        <optional>
          <ref name="hub.tabs.declaration.element"/>
        </optional>
        <optional>
          <ref name="hub.style-link.element"/>
        </optional>
      </interleave>
    </define>

    <define name="custom.css-like.rule.attributes">
      <optional>
          <ref name="db.remap.attribute"/>
        </optional>
    </define>
  </include>


  <include href="dbk/docbook.rng">
    <define name="db.version.attribute">
      <attribute name="version">
        <value>5.1-variant le-tex_Hub-1.1</value>
      </attribute>
      <optional>
        <ref name="css_att.version"/>
      </optional>
    </define>
    
    <define name="db._any">
      <empty/>
    </define>
    <define name="db._any.attribute">
      <empty/>
    </define>
    
    <define name="db.title">
      <element name="title">
        <a:documentation>The text of the title of a section of a document or of a formal block-level element</a:documentation>
        <ref name="db.title.attlist"/>
        <ref name="hub.declare.tabs"/>
        <zeroOrMore>
          <ref name="db.all.inlines"/>
        </zeroOrMore>
      </element>
    </define>

    <define name="db.para">
      <element name="para">
        <a:documentation>A paragraph</a:documentation>
        <ref name="db.para.attlist"/>
        <interleave>
          <ref name="db.para.info"/>
          <ref name="hub.declare.tabs"/>
        </interleave>
        <zeroOrMore>
          <choice>
            <ref name="db.all.inlines"/>
            <ref name="db.nopara.blocks"/>
          </choice>
        </zeroOrMore>
      </element>
    </define>

    <define name="db.formalpara">
      <element name="formalpara">
        <a:documentation>One (or more) paragraphs with a title</a:documentation>
        <ref name="db.formalpara.attlist"/>
        <ref name="db.formalpara.info"/>
        <zeroOrMore>
          <ref name="db.indexing.inlines"/>
        </zeroOrMore>
        <oneOrMore>
          <ref name="db.para"/>
        </oneOrMore>
      </element>
      </define>

    <define name="db.sidebar.info">
      <optional>
        <ref name="db._info"/>
      </optional>
    </define>

    <!-- enforced block-level-content -->
    <define name="db.entry">
       <element name="entry">
          <a:documentation>A cell in a table</a:documentation>
          <s:pattern name="Element exclusion">
             <s:rule context="db:entry">
                <s:assert test="not(.//db:table)">table must not occur among the children or descendants of entry</s:assert>
             </s:rule>
          </s:pattern>
          <ref name="db.entry.attlist"/>
          <zeroOrMore>
             <ref name="db.all.blocks"/>
          </zeroOrMore>
       </element>
    </define>

    <define name="db.itemizedlist.mark.attribute">
      <attribute name="mark">
        <a:documentation>Literal string to be used as a list marker for all items without override.</a:documentation>
        <data type="string"/>
      </attribute>
    </define>

    <define name="db.listitem.override.attribute">
      <attribute name="override">
        <a:documentation>Literal string that should be used as a list marker.</a:documentation>
        <data type="string"/>
      </attribute>
    </define>
    
    <define name="db.technical.blocks"><notAllowed/></define>
    
  </include>

  <start combine="choice">
    <ref name="hub.root"/>
  </start>

  <define name="hub.body.components">
    <choice>
      <zeroOrMore>
        <ref name="db.all.blocks"/>
      </zeroOrMore>
      <choice>
        <ref name="db.book.components"/>
        <ref name="db.article.components"/>
      </choice>
    </choice>
  </define>

  <define name="hub.root">
    <element name="hub">
      <ref name="db.common.base.attributes"/>
      <optional>
        <ref name="db.info"/>
      </optional>
      <ref name="hub.body.components"/>
    </element>
  </define>

  <define name="db.publishing.inlines" combine="choice">
    <choice>
      <ref name="hub.inline.tab"/>
      <ref name="hub.inline.br"/>
    </choice>
  </define>

  <define name="db.extension.blocks" combine="choice">
      <ref name="hub.block.hr"/>
  </define>

  <define name="db.common.base.attributes" combine="interleave">
    <optional>
      <ref name="css_meta_att.rule-map"/>
    </optional>
  </define>
    
  <define name="db.common.attributes" combine="interleave">
    <ref name="hub.att.srcpath"/>
    <ref name="css_attributes"/>
  </define>

  <define name="hub.att.srcpath">
    <optional>
      <attribute name="srcpath">
        <data type="anyURI"/>
      </attribute>
    </optional>
  </define>

  <define name="db.info.elements" combine="interleave">
    <optional>
      <ref name="css_element.rules" />
    </optional>
  </define>

  <define name="db.section.attlist" combine="interleave">
    <ref name="db.bridgehead.renderas-enum.attribute"/>
  </define>
  
  <div>
    <define name="db.annotation.role.attribute">
      <attribute name="role"/>
    </define>
    <define name="db.annotation.annotates.attribute">
      <attribute name="annotates">
        <a:documentation>Identifies one ore more elements to which this annotation applies</a:documentation>
      </attribute>
    </define>
    <define name="db.annotation.attlist">
      <interleave>
        <optional>
          <ref name="db.annotation.role.attribute"/>
        </optional>
        <optional>
          <ref name="db.annotation.annotates.attribute"/>
        </optional>
        <ref name="db.common.attributes"/>
      </interleave>
    </define>
    <define name="db.annotation.info">
      <ref name="db._info.title.only"/>
    </define>
    <define name="db.annotation">
      <element name="annotation">
        <a:documentation>An annotation</a:documentation>
        <s:pattern name="Element exclusion">
          <s:rule context="db:annotation">
            <s:assert test="not(.//db:annotation)">annotation must not occur in the descendants of annotation</s:assert>
          </s:rule>
        </s:pattern>
        <ref name="db.annotation.attlist"/>
        <ref name="db.annotation.info"/>
        <oneOrMore>
          <ref name="db.all.blocks"/>
        </oneOrMore>
      </element>
    </define>
  </div>
  
  <define name="db.ubiq.inlines" combine="choice">
    <ref name="db.annotation"/>
  </define>
  
  <define name="hub.inline.tab">
    <element name="tab">
      <ref name="hub.att.srcpath"/>
      <optional>
        <ref name="hub.inline.tab.role"/>
      </optional>
      <optional>
        <ref name="db.verbatim.xml.space.attribute"/>
      </optional>
    </element>
  </define>

  <define name="hub.inline.tab.role">
    <attribute name="role">
      <choice>
        <value>end-nested-style</value>
        <value>footnotemarker</value>
        <value>indent-to-here</value>
        <value>left</value>
        <value>right</value>
      </choice>
    </attribute>
  </define>

  <define name="hub.inline.br">
    <element name="br">
      <ref name="hub.att.srcpath"/>
      <empty/>
    </element>
  </define>

  <define name="hub.block.hr">
    <a:documentation>As in http://dev.w3.org/html5/markup/hr.html
    May also used to capture thematic breaks expressed as *** lines.
    You may use CSS like css:content="'***'" css:text-justify="center" css:font-weight="bold"</a:documentation>
    <element name="hr">
      <empty/>
    </element>
  </define>

  <a:documentation>
    archive-dir-uri: URI of the directory containing the .idml, .docx, … container file. Should be used by applications
    that process images etc. that reside outside the container and that are linked to with a relative path. 
    source-dir-uri: URI of the (temporary) directory where the archive was unzipped. Should be used by applications that 
    process unzipped archive content.    
  </a:documentation>
  <s:pattern name="Hub keywords">
    <s:let
      name="boolean-hub-keywords" 
      value="(
               'used-rules-only', 
               'hierarchized', 
               'formatting-deviations-only',
               'layout-attributes-permitted-on-phrase',
               'processed-lists',
               'marked-identifiers',
               'source-paths',
               'titles-associated-with-floats'
             )" />
    <s:let
      name="hub-keywords" 
      value="(
               $boolean-hub-keywords,
               'archive-dir-uri',
               'source-type',
               'source-basename',
               'source-dir-uri',
               'toc-title'
             )" />
    <s:let
      name="hub-source-types" 
      value="('idml', 'docx', 'xhtml10', 'xhtml11', 'xhtml5', 'epub20', 'epub30', 'odt')" />
    <s:rule context="db:info/db:keywordset[@role eq 'hub']/db:keyword">
      <s:assert test="@role = $hub-keywords" role="WRN">Hub keywords must have one of these role attributes: [<s:value-of select="$hub-keywords"/>]. Found: <s:value-of select="@role"/>.
      </s:assert>
    </s:rule>
    <s:rule context="db:info/db:keywordset[@role eq 'hub']/db:keyword[@role = $boolean-hub-keywords]">
      <s:assert test=". = ('true', 'false')" role="ERR">Boolean Hub keywords must be either 'true' or 'false'.
      </s:assert>
    </s:rule>
    <s:rule context="db:info/db:keywordset[@role eq 'hub']/db:keyword[@role = 'source-type']">
      <s:assert test=". = $hub-source-types" role="WRN">Hub keyword source-type must be one of [<s:value-of select="$hub-source-types"/>].
      </s:assert>
    </s:rule>
  </s:pattern>

  <s:pattern name="CSS version required">
    <s:rule context="/*[.//*[@css:*]]">
      <s:assert test="@css:version">If CSS attributes are used, the css:version attribute is mandatory.</s:assert>
    </s:rule>
  </s:pattern>

  <s:pattern name="Tab declaration only for paragraph styles">
    <s:rule context="css:rule[db:tabs]">
      <s:assert test="@layout-type = 'para'">Tab declarations are only meaningful within paragraph styles.</s:assert>
    </s:rule>
  </s:pattern>

  <s:pattern name="Linked styles must exist.">
    <s:rule context="css:rule[db:linked-style]">
      <s:let name="layout-type" value="db:linked-style/@layout-type"/>
      <s:let name="name" value="db:linked-style/@name"/>
      <s:assert test="exists(../css:rule[@layout-type = $layout-type][@name = $name])">Linking to non-existing <s:value-of select="$layout-type"/> style named <s:value-of select="$name"/>.</s:assert>
    </s:rule>
  </s:pattern>

  <s:pattern name="No duplicate styles of the same layout type">
    <s:rule context="css:rule">
      <s:let name="layout-type" value="@layout-type"/>
      <s:let name="name" value="@name"/>
      <s:report test="count(../css:rule[if ($layout-type) then (@layout-type = $layout-type) else true()][@name = $name]) gt 1">More than one style of type '<s:value-of select="$layout-type"/>' with the name '<s:value-of select="$name"/>'.</s:report>
    </s:rule>
  </s:pattern>
  
</grammar>
